{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nlet UpdateActivityComponent = class UpdateActivityComponent {\n  constructor(service) {\n    this.service = service;\n    this.projectId = 4;\n    this.employeeId = 15;\n    this.activityId = 0;\n    this.isFalse = false;\n    this.activity = {\n      id: 0,\n      title: '',\n      description: '',\n      activityType: '',\n      projectId: 0,\n      projectName: 0,\n      assignedBy: 0,\n      assignedTo: 0,\n      assignDate: '',\n      startDate: '',\n      dueDate: '',\n      status: ''\n    };\n    this.activityform = new FormGroup({\n      title: new FormControl(),\n      activitytype: new FormControl(),\n      description: new FormControl(),\n      assigndate: new FormControl(),\n      startdate: new FormControl(),\n      duedate: new FormControl(),\n      projectid: new FormControl(),\n      assignedby: new FormControl(),\n      assignedto: new FormControl(),\n      createddate: new FormControl(),\n      status: new FormControl()\n    });\n    this.status = \"\";\n    this.activities = [];\n  }\n  ngOnInit() {\n    this.service.getAllNotStartedActivities(this.projectId, this.employeeId).subscribe(res => {\n      this.activities = res;\n      console.log(res);\n    });\n  }\n  onChange(activity) {\n    this.activityId = activity.id;\n    this.isFalse = true;\n  }\n  update() {\n    this.status = this.activityform.get(\"status\")?.value;\n    this.service.updateActivity(this.status, this.activityId).subscribe(res => {\n      if (res) {\n        this.activities = this.activities.filter(activity => activity.id != this.activityId);\n      }\n    });\n  }\n};\nUpdateActivityComponent = __decorate([Component({\n  selector: 'app-update-activity',\n  templateUrl: './update-activity.component.html',\n  styleUrls: ['./update-activity.component.css']\n})], UpdateActivityComponent);\nexport { UpdateActivityComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;AAShD,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAClCC,YAAoBC,OAAuB;IAAvB,YAAO,GAAPA,OAAO;IAC3B,cAAS,GAAQ,CAAC;IAClB,eAAU,GAAQ,EAAE;IACpB,eAAU,GAAQ,CAAC;IACnB,YAAO,GAAY,KAAK;IACxB,aAAQ,GAAU;MAChBC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC;MACdC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE;KACT;IACD,iBAAY,GAAC,IAAIf,SAAS,CAAC;MACzBK,KAAK,EAAC,IAAIN,WAAW,EAAE;MACvBiB,YAAY,EAAC,IAAIjB,WAAW,EAAE;MAC9BO,WAAW,EAAC,IAAIP,WAAW,EAAE;MAC7BkB,UAAU,EAAC,IAAIlB,WAAW,EAAE;MAC5BmB,SAAS,EAAC,IAAInB,WAAW,EAAE;MAC3BoB,OAAO,EAAC,IAAIpB,WAAW,EAAE;MACzBqB,SAAS,EAAC,IAAIrB,WAAW,EAAE;MAC3BsB,UAAU,EAAC,IAAItB,WAAW,EAAE;MAC5BuB,UAAU,EAAC,IAAIvB,WAAW,EAAE;MAC5BwB,WAAW,EAAC,IAAIxB,WAAW,EAAE;MAC7BgB,MAAM,EAAC,IAAIhB,WAAW;KAGvB,CAAC;IAGH,WAAM,GAAQ,EAAE;IAChB,eAAU,GAAY,EAAE;EArCsB;EAsC7CyB,QAAQ;IACP,IAAI,CAACrB,OAAO,CAACsB,0BAA0B,CAAC,IAAI,CAACjB,SAAS,EAAC,IAAI,CAACkB,UAAU,CAAC,CAACC,SAAS,CAAEC,GAAG,IAAG;MACxF,IAAI,CAACC,UAAU,GAACD,GAAG;MACnBE,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;IACjB,CAAC,CAAC;EACH;EAGAI,QAAQ,CAACC,QAAiB;IAE1B,IAAI,CAACC,UAAU,GAACD,QAAQ,CAAC7B,EAAE;IAC3B,IAAI,CAAC+B,OAAO,GAAC,IAAI;EAEhB;EAEHC,MAAM;IACJ,IAAI,CAACrB,MAAM,GAAC,IAAI,CAACsB,YAAY,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAEC,KAAK;IAClD,IAAI,CAACpC,OAAO,CAACqC,cAAc,CAAC,IAAI,CAACzB,MAAM,EAAC,IAAI,CAACmB,UAAU,CAAC,CAACP,SAAS,CAAEC,GAAG,IAAG;MACzE,IAAGA,GAAG,EAAC;QACP,IAAI,CAACC,UAAU,GAAE,IAAI,CAACA,UAAU,CAACY,MAAM,CAAER,QAAQ,IAAGA,QAAQ,CAAC7B,EAAE,IAAE,IAAI,CAAC8B,UAAU,CAAC;;IAEjF,CAAC,CAAC;EACL;CAEC;AA/DYjC,uBAAuB,eALnCH,SAAS,CAAC;EACT4C,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACW3C,uBAAuB,CA+DnC;SA/DYA,uBAAuB","names":["Component","FormControl","FormGroup","UpdateActivityComponent","constructor","service","id","title","description","activityType","projectId","projectName","assignedBy","assignedTo","assignDate","startDate","dueDate","status","activitytype","assigndate","startdate","duedate","projectid","assignedby","assignedto","createddate","ngOnInit","getAllNotStartedActivities","employeeId","subscribe","res","activities","console","log","onChange","activity","activityId","isFalse","update","activityform","get","value","updateActivity","filter","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Transflower\\TFLPortal\\WebSolution\\PMSNGApp\\src\\app\\activity\\Components\\Forms\\update-activity\\update-activity.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Activity } from 'src/app/activity/Models/Activity';\nimport { ActivityService } from 'src/app/activity/Services/activity.service';\n\n@Component({\n  selector: 'app-update-activity',\n  templateUrl: './update-activity.component.html',\n  styleUrls: ['./update-activity.component.css']\n})\nexport class UpdateActivityComponent implements OnInit{\n  constructor(private service:ActivityService){}\n  projectId:number=4\n  employeeId:number=15\n  activityId:number=0;\n  isFalse: boolean = false;\n  activity:Activity={\n    id: 0,\n    title: '',\n    description: '',\n    activityType: '',\n    projectId: 0,\n    projectName: 0,\n    assignedBy: 0,\n    assignedTo: 0,\n    assignDate: '',\n    startDate: '',\n    dueDate: '',\n    status: ''\n  };\n  activityform=new FormGroup({\n    title:new FormControl(),\n    activitytype:new FormControl(),\n    description:new FormControl(),\n    assigndate:new FormControl(),\n    startdate:new FormControl(),\n    duedate:new FormControl(),\n    projectid:new FormControl(),\n    assignedby:new FormControl(),\n    assignedto:new FormControl(),\n    createddate:new FormControl(),\n    status:new FormControl(),\n  \n  \n  });\n  \n\n status:string=\"\" ;\n activities:Activity[]=[];\n  ngOnInit(): void {\n   this.service.getAllNotStartedActivities(this.projectId,this.employeeId).subscribe((res)=>{\n    this.activities=res;\n    console.log(res);\n   })\n  }\n\n\n  onChange(activity:Activity){\n\n  this.activityId=activity.id;\n  this.isFalse=true;\n  \n   }\n\nupdate(){\n  this.status=this.activityform.get(\"status\")?.value;\n  this.service.updateActivity(this.status,this.activityId).subscribe((res)=>{\n   if(res){\n   this.activities= this.activities.filter((activity)=>activity.id!=this.activityId)\n   }\n   })\n}\n   \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}