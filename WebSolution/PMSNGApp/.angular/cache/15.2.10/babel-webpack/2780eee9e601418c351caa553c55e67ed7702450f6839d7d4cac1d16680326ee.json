{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ProjectActivitiesComponent = class ProjectActivitiesComponent {\n  constructor(service) {\n    this.service = service;\n    this.projects = [];\n    this.activities = [];\n    this.projectId = 0;\n    this.isFalse = false;\n    this.todoTasks = []; // Replace 'any' with the actual type of your tasks\n    this.inprogressTasks = [];\n    this.completedTasks = [];\n    this.showTodoTasks = false;\n    this.showInProgressTasks = false;\n    this.showCompletedTasks = false;\n  }\n  ngOnInit() {\n    this.service.getAllProjects().subscribe(res => {\n      this.projects = res;\n      this.projectId = this.projects[0].id;\n      this.getActivitiesOfSelectedProject(this.projectId);\n    });\n  }\n  getSelectedProjectId(e) {\n    this.projectId = e.target.value;\n    console.log(this.projectId);\n    this.getActivitiesOfSelectedProject(this.projectId);\n  }\n  getActivitiesOfSelectedProject(projectId) {\n    this.service.getAllActivitiesByProject(projectId).subscribe(res => {\n      this.activities = res;\n      this.filterTasks();\n      console.log(res);\n    });\n  }\n  filterTasks() {\n    // Logic to filter tasks and populate todoTasks, inprogressTasks, and completedTasks\n    this.todoTasks = this.activities.filter(p => p.status.includes('todo'));\n    this.inprogressTasks = this.activities.filter(p => p.status.includes('inprogress'));\n    this.completedTasks = this.activities.filter(p => p.status.includes('completed'));\n  }\n};\nProjectActivitiesComponent = __decorate([Component({\n  selector: 'app-project-activities',\n  templateUrl: './project-activities.component.html',\n  styleUrls: ['./project-activities.component.css']\n})], ProjectActivitiesComponent);\nexport { ProjectActivitiesComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAYrCC,YAAoBC,OAAwB;IAAxB,YAAO,GAAPA,OAAO;IAX3B,aAAQ,GAAc,EAAE;IACxB,eAAU,GAAe,EAAE;IAC3B,cAAS,GAAW,CAAC;IACrB,YAAO,GAAS,KAAK;IACrB,cAAS,GAAe,EAAE,CAAC,CAAC;IAC5B,oBAAe,GAAe,EAAE;IAChC,mBAAc,GAAe,EAAE;IAC/B,kBAAa,GAAY,KAAK;IAC9B,wBAAmB,GAAY,KAAK;IACpC,uBAAkB,GAAY,KAAK;EAEY;EAE/CC,QAAQ;IACN,IAAI,CAACD,OAAO,CAACE,cAAc,EAAE,CAACC,SAAS,CAAEC,GAAG,IAAI;MAC9C,IAAI,CAACC,QAAQ,GAAGD,GAAG;MACnB,IAAI,CAACE,SAAS,GAAG,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC,CAACE,EAAE;MACpC,IAAI,CAACC,8BAA8B,CAAC,IAAI,CAACF,SAAS,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAG,oBAAoB,CAACC,CAAM;IACzB,IAAI,CAACJ,SAAS,GAAGI,CAAC,CAACC,MAAM,CAACC,KAAK;IAC/BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,SAAS,CAAC;IAC3B,IAAI,CAACE,8BAA8B,CAAC,IAAI,CAACF,SAAS,CAAC;EACrD;EAEAE,8BAA8B,CAACF,SAAiB;IAC9C,IAAI,CAACN,OAAO,CAACe,yBAAyB,CAACT,SAAS,CAAC,CAACH,SAAS,CAAEC,GAAG,IAAI;MAClE,IAAI,CAACY,UAAU,GAAGZ,GAAG;MACvB,IAAI,CAACa,WAAW,EAAE;MAChBJ,OAAO,CAACC,GAAG,CAACV,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ;EAGAa,WAAW;IACT;IACA,IAAI,CAACC,SAAS,GAAE,IAAI,CAACF,UAAU,CAACG,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,CAACC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACxE,IAAI,CAACC,eAAe,GAAE,IAAI,CAACP,UAAU,CAACG,MAAM,CAAEC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAACC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACnF,IAAI,CAACE,cAAc,GAAC,IAAI,CAACR,UAAU,CAACG,MAAM,CAAEC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAACC,QAAQ,CAAC,WAAW,CAAC,CAAC;EAClF;CAqBD;AA/DYxB,0BAA0B,eALtCD,SAAS,CAAC;EACT4B,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACW7B,0BAA0B,CA+DtC;SA/DYA,0BAA0B","names":["Component","ProjectActivitiesComponent","constructor","service","ngOnInit","getAllProjects","subscribe","res","projects","projectId","id","getActivitiesOfSelectedProject","getSelectedProjectId","e","target","value","console","log","getAllActivitiesByProject","activities","filterTasks","todoTasks","filter","p","status","includes","inprogressTasks","completedTasks","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Transflower\\TFLPortal\\WebSolution\\PMSNGApp\\src\\app\\activity\\Components\\project-activities\\project-activities.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivityService } from '../../Services/activity.service';\nimport { Project } from 'src/app/projects/Models/project';\nimport { Activity } from '../../Models/Activity';\n\n@Component({\n  selector: 'app-project-activities',\n  templateUrl: './project-activities.component.html',\n  styleUrls: ['./project-activities.component.css'],\n})\nexport class ProjectActivitiesComponent implements OnInit {\n  projects: Project[] = [];\n  activities: Activity[] = [];\n  projectId: number = 0;\n  isFalse:boolean=false;\n  todoTasks: Activity[] = []; // Replace 'any' with the actual type of your tasks\n  inprogressTasks: Activity[] = [];\n  completedTasks: Activity[] = [];\n  showTodoTasks: boolean = false;\n  showInProgressTasks: boolean = false;\n  showCompletedTasks: boolean = false;\n  \n  constructor(private service: ActivityService) {}\n\n  ngOnInit(): void {\n    this.service.getAllProjects().subscribe((res) => {\n      this.projects = res;\n      this.projectId = this.projects[0].id;\n      this.getActivitiesOfSelectedProject(this.projectId);\n    });\n  }\n\n  getSelectedProjectId(e: any) {\n    this.projectId = e.target.value;\n    console.log(this.projectId);\n    this.getActivitiesOfSelectedProject(this.projectId);\n  }\n\n  getActivitiesOfSelectedProject(projectId: number) {\n    this.service.getAllActivitiesByProject(projectId).subscribe((res) => {\n      this.activities = res;\n    this.filterTasks();\n      console.log(res);\n    });\n  }\n\n\n  filterTasks() {\n    // Logic to filter tasks and populate todoTasks, inprogressTasks, and completedTasks\n    this.todoTasks= this.activities.filter((p) => p.status.includes('todo'));\n    this.inprogressTasks= this.activities.filter((p) =>p.status.includes('inprogress'));\n    this.completedTasks=this.activities.filter((p) =>p.status.includes('completed'));\n  }\n \n  // showTasks(taskType: string) {\n  //   // Reset other checkboxes when a checkbox is checked\n  //   if (taskType === 'todo') {\n  //     this.showTodoTasks = !this.showTodoTasks;\n  //     this.tasks = this.activities.filter((p) => p.status.includes('todo'));\n  //     this.showInProgressTasks = false;\n  //     this.showCompletedTasks = false;\n  //   } else if (taskType === 'inprogress') {\n  //     this.showInProgressTasks = !this.showInProgressTasks;\n  //     this.tasks = this.activities.filter((p) =>p.status.includes('inprogress'));\n  //     this.showTodoTasks = false;\n  //     this.showCompletedTasks = false;\n  //   } else if (taskType === 'completed') {\n  //     this.showCompletedTasks = !this.showCompletedTasks;\n  //     this.tasks = this.activities.filter((p) =>p.status.includes('completed'));\n  //     this.showTodoTasks = false;\n  //     this.showInProgressTasks = false;\n  //   }\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}