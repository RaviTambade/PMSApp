{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ProjectActivitiesComponent = class ProjectActivitiesComponent {\n  constructor(service) {\n    this.service = service;\n    this.projects = [];\n    this.activities = [];\n    this.projectId = 0;\n    this.isFalse = false;\n    this.filteredActivities = [];\n    this.showTodoTasks = true;\n    this.showInProgressTasks = true;\n    this.showCompletedTasks = true;\n  }\n  ngOnInit() {\n    this.service.getAllProjects().subscribe(res => {\n      this.projects = res;\n      this.projectId = this.projects[0].id;\n      this.getActivitiesOfSelectedProject(this.projectId);\n    });\n  }\n  getSelectedProjectId(e) {\n    this.projectId = e.target.value;\n    console.log(this.projectId);\n    this.getActivitiesOfSelectedProject(this.projectId);\n  }\n  getActivitiesOfSelectedProject(projectId) {\n    this.service.getAllActivitiesByProject(projectId).subscribe(res => {\n      this.activities = res;\n      this.filterActivities();\n      console.log(res);\n    });\n  }\n  onTodoChange(e) {\n    if (e.target.checked) {\n      this.showTodoTasks = true;\n    } else {\n      this.showTodoTasks = false;\n    }\n    this.filterActivities();\n  }\n  OnProgressChange(e) {\n    if (e.target.checked) {\n      this.showInProgressTasks = true;\n    } else {\n      this.showInProgressTasks = false;\n    }\n    this.filterActivities();\n  }\n  OnCompletedChange(e) {\n    if (e.target.checked) {\n      this.showCompletedTasks = true;\n    } else {\n      this.showCompletedTasks = false;\n    }\n    this.filterActivities();\n  }\n  filterActivities() {\n    this.isFalse = false;\n    if (this.showTodoTasks && this.showInProgressTasks && this.showCompletedTasks) {\n      this.filteredActivities = this.activities;\n    } else if (this.showTodoTasks && this.showInProgressTasks) {\n      this.filteredActivities = this.activities.filter(item => item.status === 'todo' || item.status === 'inprogress');\n    } else if (this.showTodoTasks && this.showCompletedTasks) {\n      this.filteredActivities = this.activities.filter(item => item.status === 'todo' || item.status === 'completed');\n    } else if (this.showInProgressTasks && this.showCompletedTasks) {\n      this.filteredActivities = this.activities.filter(item => item.status === 'inprogress' || item.status === 'completed');\n    } else if (this.showTodoTasks) {\n      this.filteredActivities = this.activities.filter(item => item.status === 'todo');\n    } else if (this.showInProgressTasks) {\n      this.filteredActivities = this.activities.filter(item => item.status === 'inprogress');\n    } else if (this.showCompletedTasks) {\n      this.filteredActivities = this.activities.filter(item => item.status === 'completed');\n    } else {\n      this.isFalse = true;\n      this.filteredActivities = [];\n    }\n  }\n};\nProjectActivitiesComponent = __decorate([Component({\n  selector: 'app-project-activities',\n  templateUrl: './project-activities.component.html',\n  styleUrls: ['./project-activities.component.css']\n})], ProjectActivitiesComponent);\nexport { ProjectActivitiesComponent };","map":{"version":3,"mappings":"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","names":["Component","ProjectActivitiesComponent","constructor","service","ngOnInit","getAllProjects","subscribe","res","projects","projectId","id","getActivitiesOfSelectedProject","getSelectedProjectId","e","target","value","console","log","getAllActivitiesByProject","activities","filterActivities","onTodoChange","checked","showTodoTasks","OnProgressChange","showInProgressTasks","OnCompletedChange","showCompletedTasks","isFalse","filteredActivities","filter","item","status","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Transflower\\TFLPortal\\WebSolution\\PMSNGApp\\src\\app\\activity\\Components\\project-activities\\project-activities.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivityService } from '../../Services/activity.service';\r\nimport { Project } from 'src/app/projects/Models/project';\r\nimport { Activity } from '../../Models/Activity';\r\n\r\n@Component({\r\n  selector: 'app-project-activities',\r\n  templateUrl: './project-activities.component.html',\r\n  styleUrls: ['./project-activities.component.css'],\r\n})\r\nexport class ProjectActivitiesComponent implements OnInit {\r\n  projects: Project[] = [];\r\n  activities: Activity[] = [];\r\n  projectId: number = 0;\r\n  isFalse:boolean=false;\r\n  filteredActivities: Activity[]=[];\r\n\r\n  showTodoTasks: boolean = true;\r\n  showInProgressTasks: boolean = true;\r\n  showCompletedTasks: boolean = true;\r\n  \r\n  constructor(private service: ActivityService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.service.getAllProjects().subscribe((res) => {\r\n      this.projects = res;\r\n      this.projectId = this.projects[0].id;\r\n      this.getActivitiesOfSelectedProject(this.projectId);\r\n      \r\n    });\r\n  }\r\n\r\n  getSelectedProjectId(e: any) {\r\n    this.projectId = e.target.value;\r\n    console.log(this.projectId);\r\n    this.getActivitiesOfSelectedProject(this.projectId);\r\n  }\r\n\r\n  getActivitiesOfSelectedProject(projectId: number) {\r\n    this.service.getAllActivitiesByProject(projectId).subscribe((res) => {\r\n      this.activities = res;\r\n      this.filterActivities();\r\n      console.log(res);\r\n    });\r\n  }\r\n\r\n\r\n  onTodoChange(e:any):void{\r\n    if (e.target.checked) {\r\n          this.showTodoTasks=true;\r\n    }\r\n    else{\r\n      this.showTodoTasks=false;\r\n    }\r\n    this.filterActivities();\r\n  }\r\n\r\n  OnProgressChange(e:any):void{\r\n    if (e.target.checked) {\r\n          this.showInProgressTasks=true;\r\n    }\r\n    else{\r\n      this.showInProgressTasks=false;\r\n    }\r\n    this.filterActivities();\r\n  }\r\n\r\n\r\n  OnCompletedChange(e:any):void{\r\n    if (e.target.checked) {\r\n          this.showCompletedTasks=true;\r\n    }\r\n    else{\r\n      this.showCompletedTasks=false;\r\n    }\r\n    this.filterActivities();\r\n  }\r\n\r\n\r\n  filterActivities(): void {\r\n    this.isFalse=false; \r\n    if(this.showTodoTasks && this.showInProgressTasks && this.showCompletedTasks){\r\n      this.filteredActivities = this.activities;\r\n    }\r\n\r\n    else if(this.showTodoTasks && this.showInProgressTasks){\r\n      this.filteredActivities = this.activities.filter(item => item.status === 'todo' || item.status==='inprogress');\r\n    }\r\n    else if(this.showTodoTasks && this.showCompletedTasks){\r\n      this.filteredActivities = this.activities.filter(item => item.status === 'todo' || item.status==='completed');\r\n    }\r\n\r\n    else if(this.showInProgressTasks && this.showCompletedTasks){\r\n      this.filteredActivities = this.activities.filter(item => item.status === 'inprogress' || item.status==='completed');\r\n    }\r\n\r\n    else if(this.showTodoTasks){\r\n      this.filteredActivities = this.activities.filter(item => item.status === 'todo');\r\n    }\r\n    else if(this.showInProgressTasks){\r\n      this.filteredActivities = this.activities.filter(item => item.status === 'inprogress');\r\n    }\r\n    else if(this.showCompletedTasks){\r\n      this.filteredActivities = this.activities.filter(item => item.status === 'completed');\r\n    }\r\n\r\n    else{\r\n      this.isFalse=true;\r\n      this.filteredActivities=[];\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}