{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../Services/task.service\";\nimport * as i2 from \"src/app/resource-management/Services/members.service\";\nimport * as i3 from \"@angular/common\";\nfunction ListComponent_tbody_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tbody\")(1, \"tr\")(2, \"td\", 4)(3, \"a\", 5);\n    i0.ɵɵlistener(\"click\", function ListComponent_tbody_23_Template_a_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.OnClickTask(task_r1.id));\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", task_r1.title, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.status, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.assignedBy, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 4, task_r1.assignDate), \"\");\n  }\n}\nexport class ListComponent {\n  constructor(service, membersvc) {\n    this.service = service;\n    this.membersvc = membersvc;\n    this.tasks = [];\n    this.employeeId = 6;\n    this.selectedTaskId = new EventEmitter();\n  }\n  ngOnChanges(changes) {\n    this.membersvc.getMember(changes['projectId'].currentValue, this.employeeId).subscribe(res => {\n      this.member = res;\n      this.service.getTaskOfMembers(changes['projectId'].currentValue, this.member.memberId).subscribe(res => {\n        this.tasks = res;\n        this.selectedTaskId.emit(this.tasks[0].id);\n      });\n    });\n  }\n  OnClickTask(taskId) {\n    this.selectedTaskId.emit(taskId);\n  }\n  static #_ = this.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.MembersService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"task-list\"]],\n    inputs: {\n      projectId: \"projectId\"\n    },\n    outputs: {\n      selectedTaskId: \"selectedTaskId\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 24,\n    vars: 1,\n    consts: [[1, \"container\"], [1, \"card\"], [1, \"table-bordered\", \"text-center\"], [4, \"ngFor\", \"ngForOf\"], [1, \"d-flex\", \"p-1\"], [2, \"cursor\", \"pointer\", 3, \"click\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \" My Tasks\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"a\");\n        i0.ɵɵtext(4, \" NotStarted \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(5, \" |\");\n        i0.ɵɵelementStart(6, \"a\");\n        i0.ɵɵtext(7, \"InProgress\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8, \" |\");\n        i0.ɵɵelementStart(9, \"a\");\n        i0.ɵɵtext(10, \" Completed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 1)(12, \"table\", 2)(13, \"thead\")(14, \"tr\")(15, \"th\");\n        i0.ɵɵtext(16, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"th\");\n        i0.ɵɵtext(18, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"th\");\n        i0.ɵɵtext(20, \"AssignedBy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"th\");\n        i0.ɵɵtext(22, \"AssignedDate\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(23, ListComponent_tbody_23_Template, 12, 6, \"tbody\", 3);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(23);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.DatePipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAAA,SAEEA,YAAY,QAKP,eAAe;;;;;;;;ICMVC,6BAAkC;IAECA;MAAA;MAAA;MAAA;MAAA,OAASA,6CAAoB;IAAA,EAAC;IAA0BA,YAC/E;IAAAA,iBAAI;IACRA,0BAAI;IAACA,YAAe;IAAAA,iBAAK;IACzBA,0BAAI;IAACA,YAAmB;IAAAA,iBAAK;IAC7BA,0BAAI;IAACA,aAAyB;;IAAAA,iBAAK;;;;IAJgDA,eAC/E;IAD+EA,6CAC/E;IACCA,eAAe;IAAfA,8CAAe;IACfA,eAAmB;IAAnBA,kDAAmB;IACnBA,eAAyB;IAAzBA,yEAAyB;;;ADDlD,OAAM,MAAOC,aAAa;EACxBC,YACUC,OAAoB,EACpBC,SAAyB;IADzB,YAAO,GAAPD,OAAO;IACP,cAAS,GAATC,SAAS;IAGnB,UAAK,GAAW,EAAE;IAGlB,eAAU,GAAG,CAAC;IAEJ,mBAAc,GAAG,IAAIL,YAAY,EAAU;EAPlD;EASHM,WAAW,CAACC,OAAsB;IAChC,IAAI,CAACF,SAAS,CACXG,SAAS,CAACD,OAAO,CAAC,WAAW,CAAC,CAACE,YAAY,EAAE,IAAI,CAACC,UAAU,CAAC,CAC7DC,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACC,MAAM,GAAGD,GAAG;MAEjB,IAAI,CAACR,OAAO,CACTU,gBAAgB,CACfP,OAAO,CAAC,WAAW,CAAC,CAACE,YAAY,EACjC,IAAI,CAACI,MAAM,CAACE,QAAQ,CACrB,CACAJ,SAAS,CAAEC,GAAG,IAAI;QACjB,IAAI,CAACI,KAAK,GAAGJ,GAAG;QAChB,IAAI,CAACK,cAAc,CAACC,IAAI,CAAC,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,CAACG,EAAE,CAAC;MAC5C,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEAC,WAAW,CAACC,MAAc;IACxB,IAAI,CAACJ,cAAc,CAACC,IAAI,CAACG,MAAM,CAAC;EAClC;EAAC;qBAjCUnB,aAAa;EAAA;EAAA;UAAbA,aAAa;IAAAoB;IAAAC;MAAAC;IAAA;IAAAC;MAAAR;IAAA;IAAAS;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QClB1B7B,8BAAuB;QACdA,yBAAQ;QAAAA,iBAAK;QAClBA,yBAAG;QAACA,4BAAW;QAAAA,iBAAI;QAACA,kBAAC;QAAAA,yBAAG;QAAAA,0BAAU;QAAAA,iBAAI;QAACA,kBAAC;QAAAA,yBAAG;QAACA,2BAAS;QAAAA,iBAAI;QACzDA,+BAAkB;QAIEA,sBAAK;QAAAA,iBAAK;QACdA,2BAAI;QAAAA,uBAAM;QAAAA,iBAAK;QACfA,2BAAI;QAAAA,2BAAU;QAAAA,iBAAK;QACnBA,2BAAI;QAAAA,6BAAY;QAAAA,iBAAK;QAG7BA,qEAQQ;QACZA,iBAAQ;;;QAToBA,gBAAQ;QAARA,mCAAQ","names":["EventEmitter","i0","ListComponent","constructor","service","membersvc","ngOnChanges","changes","getMember","currentValue","employeeId","subscribe","res","member","getTaskOfMembers","memberId","tasks","selectedTaskId","emit","id","OnClickTask","taskId","selectors","inputs","projectId","outputs","features","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Transflower\\TFLPortal\\WebSolution\\PMSNGApp\\src\\app\\task\\Components\\list\\list.component.ts","C:\\Transflower\\TFLPortal\\WebSolution\\PMSNGApp\\src\\app\\task\\Components\\list\\list.component.html"],"sourcesContent":["import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { TaskService } from '../../Services/task.service';\r\nimport { task } from '../../Models/task';\r\nimport { MemberResponse } from 'src/app/resource-management/Models/MemberResponse';\r\nimport { MembersService } from 'src/app/resource-management/Services/members.service';\r\n\r\n@Component({\r\n  selector: 'task-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.css'],\r\n})\r\nexport class ListComponent {\r\n  constructor(\r\n    private service: TaskService,\r\n    private membersvc: MembersService\r\n  ) {}\r\n\r\n  tasks: task[] = [];\r\n  @Input() projectId!: number;\r\n  member: MemberResponse | undefined;\r\n  employeeId = 6;\r\n\r\n  @Output() selectedTaskId = new EventEmitter<number>();\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.membersvc\r\n      .getMember(changes['projectId'].currentValue, this.employeeId)\r\n      .subscribe((res) => {\r\n        this.member = res;\r\n\r\n        this.service\r\n          .getTaskOfMembers(\r\n            changes['projectId'].currentValue,\r\n            this.member.memberId\r\n          )\r\n          .subscribe((res) => {\r\n            this.tasks = res;\r\n            this.selectedTaskId.emit(this.tasks[0].id);\r\n          });\r\n      });\r\n  }\r\n\r\n  OnClickTask(taskId: number) {\r\n    this.selectedTaskId.emit(taskId);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <h2> My Tasks</h2>\r\n    <a> NotStarted </a> |<a>InProgress</a> |<a> Completed</a>\r\n    <div class=\"card\">\r\n        <table class=\"table-bordered text-center\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Title</th>\r\n                    <th>Status</th>\r\n                    <th>AssignedBy</th>\r\n                    <th>AssignedDate</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody *ngFor=\"let task of tasks\">\r\n                <tr>\r\n                    <td class=\"d-flex p-1\"> <a (click)=\"OnClickTask(task.id)\" style=\"cursor: pointer;\">{{task.title}}\r\n                        </a></td>\r\n                    <td> {{task.status}}</td>\r\n                    <td> {{task.assignedBy}}</td>\r\n                    <td> {{task.assignDate |date}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}