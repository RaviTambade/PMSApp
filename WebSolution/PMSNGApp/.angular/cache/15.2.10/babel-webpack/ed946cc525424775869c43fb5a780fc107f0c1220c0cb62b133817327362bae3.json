{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../Services/activity.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ProjectActivitiesComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const project_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", project_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(project_r1.title);\n  }\n}\nexport class ProjectActivitiesComponent {\n  constructor(service) {\n    this.service = service;\n    this.projects = [];\n    this.activities = [];\n    this.projectId = 0;\n    this.isFalse = false;\n    this.todoTasks = []; // Replace 'any' with the actual type of your tasks\n    this.inprogressTasks = [];\n    this.completedTasks = [];\n    this.filteredActivities = [];\n    this.showTodoTasks = false;\n    this.showInProgressTasks = false;\n    this.showCompletedTasks = false;\n  }\n  ngOnInit() {\n    this.service.getAllProjects().subscribe(res => {\n      this.projects = res;\n      this.projectId = this.projects[0].id;\n      this.getActivitiesOfSelectedProject(this.projectId);\n    });\n  }\n  getSelectedProjectId(e) {\n    this.projectId = e.target.value;\n    console.log(this.projectId);\n    this.getActivitiesOfSelectedProject(this.projectId);\n  }\n  getActivitiesOfSelectedProject(projectId) {\n    this.service.getAllActivitiesByProject(projectId).subscribe(res => {\n      this.activities = res;\n      console.log(res);\n    });\n  }\n  // filterTasks() {\n  //   // Logic to filter tasks and populate todoTasks, inprogressTasks, and completedTasks\n  //   this.todoTasks= this.activities.filter((p) => p.status.includes('todo'));\n  //   this.inprogressTasks= this.activities.filter((p) =>p.status.includes('inprogress'));\n  //   this.completedTasks=this.activities.filter((p) =>p.status.includes('completed'));\n  // }\n  // filterArray(status: string): void {\n  //   switch (status) {\n  //     case 'A':\n  //       this.activities = this.activities.filter(item => item.status === 'todo');\n  //       break;\n  //     case 'B':\n  //       this.activities = this.activities.filter(item => item.status === 'inprogress');\n  //       break;\n  //     case 'B':\n  //         this.activities = this.activities.filter(item => item.status === 'completed');\n  //      break;\n  //     // Add more cases as needed\n  //     default:\n  //       this.activities = this.activities;\n  //       break;\n  //   }\n  // }\n  filterArray(status) {\n    switch (status) {\n      case 'A':\n        this.filteredActivities = this.activities.filter(item => item.status === 'todo');\n        break;\n      case 'B':\n        this.filteredActivities = this.activities.filter(item => item.status === 'inprogress');\n        break;\n      case 'C':\n        this.filteredActivities = this.activities.filter(item => item.status === 'completed');\n        break;\n      // Add more cases as needed\n      default:\n        this.filteredActivities = this.activities;\n        break;\n    }\n  }\n  updateStatus(activity, newStatus) {\n    activity.status = newStatus;\n  }\n  static #_ = this.ɵfac = function ProjectActivitiesComponent_Factory(t) {\n    return new (t || ProjectActivitiesComponent)(i0.ɵɵdirectiveInject(i1.ActivityService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectActivitiesComponent,\n    selectors: [[\"app-project-activities\"]],\n    decls: 55,\n    vars: 13,\n    consts: [[\"for\", \"project\"], [\"id\", \"project\", \"name\", \"project\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"checkbox\", 3, \"checked\", \"change\"], [1, \"table-bordered\", \"text-center\"], [3, \"value\"]],\n    template: function ProjectActivitiesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0, \"\\u00A0\\u00A0\\u00A0\\u00A0 \");\n        i0.ɵɵelementStart(1, \"div\")(2, \"label\", 0);\n        i0.ɵɵtext(3, \"Project Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"select\", 1);\n        i0.ɵɵlistener(\"change\", function ProjectActivitiesComponent_Template_select_change_4_listener($event) {\n          return ctx.getSelectedProjectId($event);\n        });\n        i0.ɵɵtemplate(5, ProjectActivitiesComponent_option_5_Template, 2, 2, \"option\", 2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtext(6, \"\\u00A0\\u00A0\\u00A0\\u00A0 \");\n        i0.ɵɵelementStart(7, \"div\")(8, \"input\", 3);\n        i0.ɵɵlistener(\"change\", function ProjectActivitiesComponent_Template_input_change_8_listener() {\n          return ctx.updateStatus(ctx.activity, \"todo\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(9, \" Todo \");\n        i0.ɵɵelementStart(10, \"input\", 3);\n        i0.ɵɵlistener(\"change\", function ProjectActivitiesComponent_Template_input_change_10_listener() {\n          return ctx.updateStatus(ctx.activity, \"inprogress\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(11, \" In Progress \");\n        i0.ɵɵelementStart(12, \"input\", 3);\n        i0.ɵɵlistener(\"change\", function ProjectActivitiesComponent_Template_input_change_12_listener() {\n          return ctx.updateStatus(ctx.activity, \"completed\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \" Completed \");\n        i0.ɵɵelementStart(14, \"table\", 4)(15, \"thead\")(16, \"tr\")(17, \"th\");\n        i0.ɵɵtext(18, \"activityType\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"th\");\n        i0.ɵɵtext(20, \"title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"th\");\n        i0.ɵɵtext(22, \"description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"th\");\n        i0.ɵɵtext(24, \"assignDate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"th\");\n        i0.ɵɵtext(26, \"assignedBy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"th\");\n        i0.ɵɵtext(28, \"assignedTo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"th\");\n        i0.ɵɵtext(30, \"startDate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"th\");\n        i0.ɵɵtext(32, \"dueDate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"th\");\n        i0.ɵɵtext(34, \"status\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(35, \"tbody\")(36, \"tr\")(37, \"td\");\n        i0.ɵɵtext(38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"td\");\n        i0.ɵɵtext(40);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"td\");\n        i0.ɵɵtext(42);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"td\");\n        i0.ɵɵtext(44);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"td\");\n        i0.ɵɵtext(46);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"td\");\n        i0.ɵɵtext(48);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"td\");\n        i0.ɵɵtext(50);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"td\");\n        i0.ɵɵtext(52);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"td\");\n        i0.ɵɵtext(54);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projects);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"checked\", ctx.activity.status === \"todo\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx.activity.status === \"inprogress\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx.activity.status === \"completed\");\n        i0.ɵɵadvance(26);\n        i0.ɵɵtextInterpolate(ctx.activity.activityType);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.title);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.description);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.assignDate);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.assignedBy);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.assignedTo);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.startDate);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.dueDate);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.activity.status);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","ProjectActivitiesComponent","constructor","service","ngOnInit","getAllProjects","subscribe","res","projects","projectId","id","getActivitiesOfSelectedProject","getSelectedProjectId","e","target","value","console","log","getAllActivitiesByProject","activities","filterArray","status","filteredActivities","filter","item","updateStatus","activity","newStatus","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Transflower\\TFLPortal\\WebSolution\\PMSNGApp\\src\\app\\activity\\Components\\project-activities\\project-activities.component.html","C:\\Transflower\\TFLPortal\\WebSolution\\PMSNGApp\\src\\app\\activity\\Components\\project-activities\\project-activities.component.ts"],"sourcesContent":["&nbsp;&nbsp;&nbsp;&nbsp;\n\n<div>\n  <label for=\"project\">Project Name:</label>\n  <select id=\"project\" name=\"project\" (change)=\"getSelectedProjectId($event)\">\n    <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{project.title}}</option>\n  </select>\n</div>&nbsp;&nbsp;&nbsp;&nbsp;\n\n\n\n\n<!-- <div class=\"checkbox-container\">\n  <label>\n    <input type=\"checkbox\" [(ngModel)]=\"showTodoTasks\"> ToDo\n  </label>\n  <label>\n    <input type=\"checkbox\" [(ngModel)]=\"showInProgressTasks\"> Inprogress\n  </label>\n  <label>\n    <input type=\"checkbox\" [(ngModel)]=\"showCompletedTasks\"> Completed\n  </label>\n</div>\n\n<div class=\"task-list\">\n  <div >\n    <div id=\"tasksContainer\">\n      <div class=\"container\">\n        <div class=\"card\">\n          <table class=\"table-bordered text-center\">\n            <thead>\n              <tr>\n                <th>activityType</th>\n                <th>title</th>\n                <th>description</th>\n                <th>assignDate</th>\n                <th>assignedBy</th>\n                <th>assignedTo</th>\n                <th>startDate</th>\n                <th>dueDate</th>\n                <th>status</th>\n              </tr>\n            </thead>\n            <tbody *ngFor=\"let activity of todoTasks\">\n              <tr>\n                <td>{{activity.activityType}}</td>\n                <td>{{activity.title}}</td>\n                <td>{{activity.description}}</td>\n                <td>{{activity.assignDate}}</td>\n                <td>{{activity.assignedBy}}</td>\n                <td>{{activity.assignedTo}}</td>\n                <td>{{activity.startDate}}</td>\n                <td>{{activity.dueDate}}</td>\n                <td>{{activity.status}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div> \n    \n  </div>\n  \n  -->\n\n  <div >\n    <input type=\"checkbox\" [checked]=\"activity.status === 'todo'\" (change)=\"updateStatus(activity, 'todo')\"> Todo\n    <input type=\"checkbox\" [checked]=\"activity.status === 'inprogress'\" (change)=\"updateStatus(activity, 'inprogress')\"> In Progress\n    <input type=\"checkbox\" [checked]=\"activity.status === 'completed'\" (change)=\"updateStatus(activity, 'completed')\"> Completed\n    <table class=\"table-bordered text-center\">\n      <thead>\n        <tr>\n          <th>activityType</th>\n          <th>title</th>\n          <th>description</th>\n          <th>assignDate</th>\n          <th>assignedBy</th>\n          <th>assignedTo</th>\n          <th>startDate</th>\n          <th>dueDate</th>\n          <th>status</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{{activity.activityType}}</td>\n          <td>{{activity.title}}</td>\n          <td>{{activity.description}}</td>\n          <td>{{activity.assignDate}}</td>\n          <td>{{activity.assignedBy}}</td>\n          <td>{{activity.assignedTo}}</td>\n          <td>{{activity.startDate}}</td>\n          <td>{{activity.dueDate}}</td>\n          <td>{{activity.status}}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { ActivityService } from '../../Services/activity.service';\nimport { Project } from 'src/app/projects/Models/project';\nimport { Activity } from '../../Models/Activity';\n\n@Component({\n  selector: 'app-project-activities',\n  templateUrl: './project-activities.component.html',\n  styleUrls: ['./project-activities.component.css'],\n})\nexport class ProjectActivitiesComponent implements OnInit {\n  projects: Project[] = [];\n  activities: Activity[] = [];\n  projectId: number = 0;\n  isFalse:boolean=false;\n  todoTasks: Activity[] = []; // Replace 'any' with the actual type of your tasks\n  inprogressTasks: Activity[] = [];\n  completedTasks: Activity[] = [];\n  filteredActivities: Activity[]=[];\n\n  showTodoTasks: boolean = false;\n  showInProgressTasks: boolean = false;\n  showCompletedTasks: boolean = false;\n  \n  constructor(private service: ActivityService) {}\n\n  ngOnInit(): void {\n    this.service.getAllProjects().subscribe((res) => {\n      this.projects = res;\n      this.projectId = this.projects[0].id;\n      this.getActivitiesOfSelectedProject(this.projectId);\n    });\n  }\n\n  getSelectedProjectId(e: any) {\n    this.projectId = e.target.value;\n    console.log(this.projectId);\n    this.getActivitiesOfSelectedProject(this.projectId);\n  }\n\n  getActivitiesOfSelectedProject(projectId: number) {\n    this.service.getAllActivitiesByProject(projectId).subscribe((res) => {\n      this.activities = res;\n      console.log(res);\n    });\n  }\n\n\n  // filterTasks() {\n  //   // Logic to filter tasks and populate todoTasks, inprogressTasks, and completedTasks\n   \n  //   this.todoTasks= this.activities.filter((p) => p.status.includes('todo'));\n  //   this.inprogressTasks= this.activities.filter((p) =>p.status.includes('inprogress'));\n  //   this.completedTasks=this.activities.filter((p) =>p.status.includes('completed'));\n  // }\n \n  // filterArray(status: string): void {\n  //   switch (status) {\n  //     case 'A':\n  //       this.activities = this.activities.filter(item => item.status === 'todo');\n  //       break;\n  //     case 'B':\n  //       this.activities = this.activities.filter(item => item.status === 'inprogress');\n  //       break;\n\n  //     case 'B':\n  //         this.activities = this.activities.filter(item => item.status === 'completed');\n  //      break;\n  //     // Add more cases as needed\n  //     default:\n  //       this.activities = this.activities;\n  //       break;\n  //   }\n  // }\n  \n\n  filterArray(status: string): void {\n    switch (status) {\n      case 'A':\n        this.filteredActivities = this.activities.filter(item => item.status === 'todo');\n        break;\n      case 'B':\n        this.filteredActivities = this.activities.filter(item => item.status === 'inprogress');\n        break;\n      case 'C':\n        this.filteredActivities = this.activities.filter(item => item.status === 'completed');\n        break;\n      // Add more cases as needed\n      default:\n        this.filteredActivities = this.activities;\n        break;\n    }\n  }\n\n  updateStatus(activity: any, newStatus: string): void {\n    activity.status = newStatus;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}